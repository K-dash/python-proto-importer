name: Release PyPI

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

defaults:
  run:
    shell: bash

permissions:
  contents: read
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-publish:
    name: Build wheels and publish to PyPI
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            target: manylinux2014
          - os: macos-14
            target: macos
          - os: windows-2022
            target: windows

    env:
      PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      CARGO_TERM_COLOR: always

    steps:
      - uses: actions/checkout@v5

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Python (for metadata tools)
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Build wheels (Linux manylinux2014)
        if: ${{ runner.os == 'Linux' && matrix.target == 'manylinux2014' }}
        uses: PyO3/maturin-action@v1
        with:
          manylinux: '2014'
          command: build
          args: >-
            --release --features python -o dist

      # If musllinux is needed, add a matrix entry and a step like below:
      # - name: Build wheels (Linux musllinux)
      #   if: ${{ runner.os == 'Linux' && matrix.target == 'musllinux_1_2' }}
      #   uses: PyO3/maturin-action@v1
      #   with:
      #     manylinux: musllinux_1_2
      #     command: build
      #     args: >-
      #       --release --features python -o dist

      - name: Build wheels (macOS wheels)
        if: ${{ runner.os == 'macOS' }}
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: >-
            --release --features python -o dist

      - name: Build wheels (Windows)
        if: ${{ runner.os == 'Windows' }}
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: >-
            --release --features python -o dist

      - name: Build sdist (once)
        if: ${{ runner.os == 'Linux' && matrix.target == 'manylinux2014' }}
        run: |
          uv run maturin sdist -o dist

      - name: Publish to PyPI
        if: ${{ env.PYPI_API_TOKEN != '' }}
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          shopt -s nullglob
          files=(dist/*)
          if (( ${#files[@]} )); then
            uv run maturin upload --skip-existing "${files[@]}"
          else
            echo "No distribution files in dist/ on this runner, skipping upload."
          fi

